provider "aws" {
  region = "us-east-1"
}

# ðŸ”¹ Create a Security Group for ALB
resource "aws_security_group" "alb_sg" {
  name        = "alb-sg"
  description = "Allow HTTP inbound traffic"

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"] # Open to all
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# ðŸ”¹ Create an ALB
resource "aws_lb" "my_alb" {
  name               = "my-load-balancer"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.alb_sg.id]
  subnets            = ["subnet-05d91bf5e5047a290", "subnet-0800ab7be93a8bb66"] # Replace with your subnet IDs
}

# ðŸ”¹ Create a Target Group
resource "aws_lb_target_group" "my_target_group" {
  name     = "my-target-group"
  port     = 80
  protocol = "HTTP"
  vpc_id   = "vpc-00dab83f60da4a79e" # Replace with your VPC ID
}

# ðŸ”¹ Create an ALB Listener
resource "aws_lb_listener" "http_listener" {
  load_balancer_arn = aws_lb.my_alb.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.my_target_group.arn
  }
}

# ðŸ”¹ Create a Security Group for ASG instances
resource "aws_security_group" "asg_sg" {
  name        = "asg-security-group"
  description = "Allow inbound traffic from ALB"

  ingress {
    from_port       = 80
    to_port         = 80
    protocol        = "tcp"
    security_groups = [aws_security_group.alb_sg.id] # Allow traffic only from ALB
  }

  # Allow SSH (port 22) - Restrict to a specific IP (replace with your IP)
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["49.204.163.152/32"] # Replace with your actual IP
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# ðŸ”¹ Create a Launch Template
resource "aws_launch_template" "example" {
  name_prefix   = "my-template"
  image_id      = "ami-04681163a08179f28" # Replace with your AMI ID
  instance_type = "t2.micro"
  key_name      = "jaisri" # Replace with your SSH key
  user_data     = base64encode(file("user-data.sh"))

  network_interfaces {
    associate_public_ip_address = true
    security_groups             = [aws_security_group.asg_sg.id]
  }

  tag_specifications {
    resource_type = "instance"
    tags = {
      Name = "ASG-Instance"
    }
  }
}

# ðŸ”¹ Create an Auto Scaling Group
resource "aws_autoscaling_group" "my_asg" {
  desired_capacity    = 2
  min_size            = 1
  max_size            = 3
  vpc_zone_identifier = ["subnet-05d91bf5e5047a290", "subnet-0800ab7be93a8bb66"] # Replace with your subnet IDs

  launch_template {
    id      = aws_launch_template.example.id
    version = "$Latest"
  }

  # Attach ASG instances to ALB Target Group
  target_group_arns = [aws_lb_target_group.my_target_group.arn]

  tag {
    key                 = "Name"
    value               = "ASG-Instance"
    propagate_at_launch = true
  }
}

# ðŸ”¹ Auto Scaling Policy: Scale Out
resource "aws_autoscaling_policy" "scale_out" {
  name                   = "scale-out"
  scaling_adjustment     = 1
  adjustment_type        = "ChangeInCapacity"
  cooldown               = 60
  autoscaling_group_name = aws_autoscaling_group.my_asg.name
}

# ðŸ”¹ Auto Scaling Policy: Scale In
resource "aws_autoscaling_policy" "scale_in" {
  name                   = "scale-in"
  scaling_adjustment     = -1
  adjustment_type        = "ChangeInCapacity"
  cooldown               = 60
  autoscaling_group_name = aws_autoscaling_group.my_asg.name
}
